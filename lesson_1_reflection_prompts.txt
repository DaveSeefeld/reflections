How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It allowed me to see both versions of the file and identified the 
	differences in the lines, which was quicker than if I had scanned for them
	myself.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You have a history of every line of code you type.  If you don't find a bug
	immediately, you will have the history of the code and can find out when the
	change was made that introduced the bug, no matter when it was changed.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    You have more flexibility when the commit is created, so the commit isn't too
	big or too small.  The commit can be created logically based on the change
	that is being made, making the commits easier to review.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Some files have dependencies on other files, so when one file changes, others
	logically would change too.  Having the ability to commit many files in a 
	single commit allows tracking a change that impacted multiple files.

How can you use the commands git log and git diff to view the history of files?

    Using git log gives a high level description of the commits, so it is important
	to add useful descriptions when making commits.  This will help you identify 
	the commit that had the change you were investigating.  The command git diff 
	takes the commit ids of two commits and lists the differences.  You can 
	use this to help find lines of added, removed, or changed code.  

How might using version control make you more confident to make changes that
could break something?

    Having version control means that a working copy will always be retained,
	so if you break something, you can always revert back to the working version.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git so I can feel confident about making changes to my code by 
	keeping a history of changes, and be efficient in troubleshooting by being 
	able to easily see differences between versions of my code.
